import type { Metadata } from "next";
import { Geist, Geist_Mono, Poppins } from "next/font/google";
import { Header, Footer } from "@/components/index";
import FirebaseAuthProvider from "@/context/FirebaseAuthContext";
import FirebaseApiProvider from "@/context/FirebaseApiContext";
import Provider from "@/context/context";
import { ThemeProvider } from "@/components/mode-toggle/theme-provider";
import { Toaster } from "@/components/ui/sonner";
import "../styles/index.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

const poppins = Poppins({
  subsets: ["latin"],
  weight: ["100", "200", "300", "400", "500", "600", "700", "800", "900"],
  variable: "--font-poppins",
});

const siteUrl = process.env.NEXT_PUBLIC_SITE_URL || "https://next-modules.vercel.app";

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
  authors: [{ name: "Karen A.", url: "https://www.linkedin.com/in/karen86/" }],
  icons: {
    icon: [
      { rel: "icon", url: "/assets/images/favicon/favicon-32x32.png", sizes: "32x32" },
      { rel: "icon", url: "/assets/images/favicon/favicon-16x16.png", sizes: "16x16" },
    ],
    apple: "/assets/images/favicon/apple-icon.png", // 180x180 recommended
  },
  openGraph: {
    title: "Sheet - Your Website Name",
    description: "This is the sheet page for managing your content.",
    url: `${siteUrl}`,
    siteName: "Your Website Name",
    images: [`${siteUrl}/assets/images/og-image.png`], //recomened sizes 1200x630, 1080 × 566, 600 × 315 | aspect ratio 1.91:1
    locale: "en_US",
    type: "website",
  },
  twitter: {
    card: "summary_large_image",
    title: "Sheet - Your Website Name",
    description: "This is the sheet page for managing your content.",
    images: [`${siteUrl}/assets/images/og-image.png`], //recomened sizes 1200x630, 1080 × 566, 600 × 315 | aspect ratio 1.91:1
  },
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={`${geistSans.variable} ${geistMono.variable} ${poppins.variable} antialiased`}>
        <FirebaseAuthProvider>
          <FirebaseApiProvider>
            <Provider>
              <ThemeProvider attribute="class" defaultTheme="system" enableSystem disableTransitionOnChange>
                {children}
                <Toaster />
              </ThemeProvider>
            </Provider>
          </FirebaseApiProvider>
        </FirebaseAuthProvider>
      </body>
    </html>
  );
}
